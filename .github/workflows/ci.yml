name: 🚀 Continuous Integration

on:
  push:
    branches: [main, develop]
    paths:
      - 'lambda-templates/lambda-typescript-template/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'lambda-templates/lambda-typescript-template/**'
      - '.github/workflows/ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  TERRAFORM_VERSION: '1.6.0'
  WORKING_DIR: lambda-templates/lambda-typescript-template

jobs:
  # 🔍 Code Quality & Security
  quality-gate:
    name: 🛡️ Quality Gate
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.quality-check.outputs.passed }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm ci --production=false
          npm install -g typescript@latest

      - name: 🔍 Lint Code
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run lint
          npm run lint:fix -- --dry-run

      - name: 🔒 Security Audit
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm audit --audit-level=moderate
          npx better-npm-audit audit --level moderate

      - name: 🏗️ Type Check
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run compile

      - name: 🧪 Unit Tests
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run test:unit
          npm run test:coverage

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ env.WORKING_DIR }}/coverage
          flags: typescript-unit
          name: typescript-unit-tests

      - name: ✅ Quality Check Passed
        id: quality-check
        run: echo "passed=true" >> $GITHUB_OUTPUT

  # 🏗️ Build & Package
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.should-deploy == 'true'
    outputs:
      build-version: ${{ steps.version.outputs.version }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci --production=false

      - name: 🏗️ Build Application
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run build
          npm run package

      - name: 📋 Generate Version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION="v$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          else
            VERSION="${{ github.ref_name }}-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Build version: $VERSION"

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-packages-${{ steps.version.outputs.version }}
          path: |
            ${{ env.WORKING_DIR }}/build/*.zip
          retention-days: 30

  # 🏗️ Infrastructure Validation
  infrastructure:
    name: 🏗️ Infrastructure Validation
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.should-deploy == 'true'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: 🔧 Terraform Init
        working-directory: ${{ env.WORKING_DIR }}/terraform
        run: terraform init -backend=false

      - name: ✅ Terraform Validate
        working-directory: ${{ env.WORKING_DIR }}/terraform
        run: terraform validate

      - name: 🎨 Terraform Format Check
        working-directory: ${{ env.WORKING_DIR }}/terraform
        run: terraform fmt -check -recursive

      - name: 🔍 TFLint Security Scan
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: 🔍 Run TFLint
        working-directory: ${{ env.WORKING_DIR }}/terraform
        run: |
          tflint --init
          tflint --recursive --config=../.tflint.hcl

      - name: 🛡️ Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.WORKING_DIR }}/terraform
          framework: terraform
          output_format: sarif
          output_file_path: reports/checkov-results.sarif
          quiet: true
          soft_fail: false

      - name: 📊 Upload Security Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/checkov-results.sarif

      - name: 💰 Infrastructure Cost Estimate
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: 💰 Generate Cost Estimate
        run: |
          cd ${{ env.WORKING_DIR }}/terraform
          infracost breakdown --path . \
            --format json \
            --out-file /tmp/infracost.json
          infracost output --path /tmp/infracost.json \
            --format table \
            --out-file /tmp/infracost.txt

      - name: 💰 Upload Cost Analysis
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-cost-analysis
          path: /tmp/infracost.*

  # 🧪 Integration Tests
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: [build, infrastructure]
    if: github.event_name == 'pull_request'
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: lambda,dynamodb,apigateway,logs,events
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages-${{ needs.build.outputs.build-version }}
          path: ${{ env.WORKING_DIR }}/build

      - name: 📦 Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: 🧪 Run Integration Tests
        working-directory: ${{ env.WORKING_DIR }}
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: |
          npm run test:integration
          npm run test:e2e

      - name: 📊 Upload Integration Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            ${{ env.WORKING_DIR }}/test-results/
            ${{ env.WORKING_DIR }}/coverage/

  # 🚀 Deployment Planning
  deployment-plan:
    name: 🚀 Deployment Plan
    runs-on: ubuntu-latest
    needs: [build, infrastructure]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
    steps:
      - name: 🎯 Determine Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: ✅ Deployment Check
        id: deploy-check
        run: echo "should-deploy=true" >> $GITHUB_OUTPUT

  # 📈 Performance & Monitoring
  performance-baseline:
    name: 📈 Performance Baseline
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages-${{ needs.build.outputs.build-version }}
          path: ${{ env.WORKING_DIR }}/build

      - name: 📊 Bundle Size Analysis
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "## 📦 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Function | Size | Compressed |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|------------|" >> $GITHUB_STEP_SUMMARY
          for zip in build/*.zip; do
            name=$(basename "$zip" .zip)
            size=$(stat -c%s "$zip" | numfmt --to=iec)
            echo "| $name | $size | $size |" >> $GITHUB_STEP_SUMMARY
          done

      - name: 🔋 Lambda Cold Start Analysis
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "## 🔋 Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Optimization**: ✅ TypeScript compiled to ES2022" >> $GITHUB_STEP_SUMMARY
          echo "- **Tree Shaking**: ✅ Enabled via ESBuild" >> $GITHUB_STEP_SUMMARY
          echo "- **ARM64 Architecture**: ✅ 20% better price-performance" >> $GITHUB_STEP_SUMMARY
          echo "- **Lambda Layers**: ❌ Not implemented (consider for shared dependencies)" >> $GITHUB_STEP_SUMMARY

  # 🎯 Deployment Gate
  deployment-gate:
    name: 🎯 Deployment Gate
    runs-on: ubuntu-latest
    needs: [quality-gate, build, infrastructure, deployment-plan]
    if: |
      always() &&
      needs.deployment-plan.outputs.should-deploy == 'true' &&
      needs.quality-gate.result == 'success' &&
      needs.build.result == 'success' &&
      needs.infrastructure.result == 'success'
    steps:
      - name: 🎯 Gate Status
        run: |
          echo "## 🎯 Deployment Gate Status" >> $GITHUB_STEP_SUMMARY
          echo "✅ All quality gates passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ Infrastructure validated" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Ready for deployment to ${{ needs.deployment-plan.outputs.environment }}" >> $GITHUB_STEP_SUMMARY

      - name: 🚀 Trigger Deployment
        run: |
          echo "deployment_ready=true" >> $GITHUB_OUTPUT
          echo "🚀 Deployment pipeline ready for ${{ needs.deployment-plan.outputs.environment }} environment"